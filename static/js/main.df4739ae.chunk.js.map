{"version":3,"sources":["pages/index.tsx","Layout/Header.tsx","Layout/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx","entities/stores/CityStore.tsx","entities/index.tsx","entities/stores/Logger.tsx"],"names":["Items","React","lazy","Main","Suspense","fallback","Routes","exact","path","component","Header","className","justify","align","gutter","Footer","span","Content","Layout","App","id","Provider","value","createStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","CityStore","setCity","city","cities","setCurrentCity","currentCity","clearCurrentCity","deleteCity","list","filter","elem","name","observable","Logger","StoresContext","createContext","useStores","stores","useContext","Error","setIsError","isError"],"mappings":"0OAGMA,EAAQC,IAAMC,MAAK,kBAAM,uDAEzBC,EAAO,kBACX,kBAAC,IAAMC,SAAP,CAAgBC,SAAS,cACvB,kBAACL,EAAD,QAISM,EAAS,kBACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,UAAWN,M,kBCTxCO,G,MAAmB,WAC9B,OACE,kBAAC,IAAOA,OAAR,CAAeC,UAAU,UACvB,kBAAC,IAAD,CAAKC,QAAQ,gBAAgBC,MAAM,SAASC,OAAQ,CAAC,GAAI,IACvD,kBAAC,IAAD,+BCJKC,EAAmB,WAC9B,OACE,kBAAC,IAAOA,OAAR,KACE,kBAAC,IAAD,CACEH,QAAQ,gBACRC,MAAM,SACNC,OAAQ,CAAC,GAAI,GACbH,UAAU,UAEV,kBAAC,IAAD,CAAKK,KAAM,GAAX,yBCFAC,G,OAAYC,IAAZD,SAkBOE,MAhBf,WACE,OACE,kBAAC,IAAD,CAAQC,GAAG,eACT,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAcC,SAAf,CAAwBC,MAAOC,eAC7B,kBAACN,EAAD,KACE,kBAAC,EAAD,QAGJ,kBAAC,EAAD,SCXYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,+ME9IfC,GAAb,4HAIEC,QAAU,SAACC,GACT,EAAKC,OAAL,sBAAkB,EAAKA,QAAvB,CAA+BD,KALnC,KAQEE,eAAiB,SAACF,GAChB,EAAKG,YAAcH,GATvB,KAYEI,iBAAmB,WACjB,EAAKD,YAAc,IAbvB,KAgBEE,WAAa,SAACL,GACZ,IAAMM,EAAO,EAAKL,OAAOM,QAAO,SAACC,GAAD,OAAeA,EAAKC,OAAST,KAC7D,EAAKC,OAASK,IAlBlB,oCACGI,KADH,wEACmC,MADnC,yCAEGA,KAFH,wEAEiC,MAFjC,G,GAsBe,IAAIZ,E,OChBNrB,EAAc,iBAAe,CACxCqB,UAAW,IAAIA,EACfa,aAGWC,EAAgBzD,IAAM0D,cAA6B,MAEnDC,EAAY,WACvB,IAAMC,EAAS5D,IAAM6D,WAAWJ,GAEhC,IAAKG,EACH,MAAM,IAAIE,MACR,mMAIJ,OAAOF,I,mFCXHJ,EAAS,IAZf,wJAKEO,WAAa,SAACC,EAAkBvC,EAAkBN,GAChD,EAAK6C,QAAUA,EACf,EAAKvC,SAAWA,EAChB,EAAKN,GAAKA,IARd,qCACGoC,KADH,yEACiC,KADjC,sCAEGA,KAFH,wEAEiC,MAFjC,gCAGGA,KAHH,wEAG2B,MAH3B,GAceC,O","file":"static/js/main.df4739ae.chunk.js","sourcesContent":["import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nconst Items = React.lazy(() => import('./MainPage'));\n\nconst Main = () => (\n  <React.Suspense fallback=\"...Loading\">\n    <Items />\n  </React.Suspense>\n);\n\nexport const Routes = () => (\n  <Switch>\n    <Route exact path=\"/simpleWeatherApp\" component={Main} />\n  </Switch>\n);\n","import React from 'react';\nimport { Row, Col, Layout } from 'antd';\nimport './styles.css';\n\nexport const Header: React.FC = () => {\n  return (\n    <Layout.Header className=\"header\">\n      <Row justify=\"space-between\" align=\"middle\" gutter={[10, 0]}>\n        <Col>Simple Weather App</Col>\n      </Row>\n    </Layout.Header>\n  );\n};\n","import React from 'react';\nimport { Row, Col, Layout } from 'antd';\nimport './styles.css';\n\nexport const Footer: React.FC = () => {\n  return (\n    <Layout.Footer>\n      <Row\n        justify=\"space-between\"\n        align=\"middle\"\n        gutter={[10, 0]}\n        className=\"footer\"\n      >\n        <Col span={4}>Simple Weather App</Col>\n      </Row>\n    </Layout.Footer>\n  );\n};\n","import React from 'react';\nimport { Layout } from 'antd';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { StoresContext, createStore } from './entities/index';\nimport { Routes } from './pages/index';\n\nimport { Header } from 'src/Layout/Header';\nimport { Footer } from 'src/Layout/Footer';\nimport './App.css';\n\nconst { Content } = Layout;\n\nfunction App() {\n  return (\n    <Layout id=\"rootSection\">\n      <Router>\n        <Header />\n        <StoresContext.Provider value={createStore()}>\n          <Content>\n            <Routes />\n          </Content>\n        </StoresContext.Provider>\n        <Footer />\n      </Router>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { observable } from 'mobx';\nimport { TWeather } from '../../api/types';\n\nexport class CityStore {\n  @observable cities: TWeather[] = [];\n  @observable currentCity: any = [];\n\n  setCity = (city: TWeather): void => {\n    this.cities = [...this.cities, city];\n  };\n\n  setCurrentCity = (city: TWeather[]): void => {\n    this.currentCity = city;\n  };\n\n  clearCurrentCity = (): void => {\n    this.currentCity = [];\n  };\n\n  deleteCity = (city: any): void => {\n    const list = this.cities.filter((elem: any) => elem.name !== city);\n    this.cities = list;\n  };\n}\n\nexport default new CityStore();\n","import React from 'react';\nimport { CityStore } from './stores/CityStore';\nimport Logger from './stores/Logger';\n\nexport type TStore = {\n  CityStore: CityStore;\n  Logger: typeof Logger;\n};\n\nexport const createStore = (): TStore => ({\n  CityStore: new CityStore(),\n  Logger,\n});\n\nexport const StoresContext = React.createContext<TStore | null>(null);\n\nexport const useStores = (): TStore => {\n  const stores = React.useContext(StoresContext);\n\n  if (!stores) {\n    throw new Error(\n      'useStores() следует использовать внутри <StoresContext.provider />'\n    );\n  }\n\n  return stores;\n};\n","import { observable } from 'mobx';\n\nexport class FrontendLoggers {\n  @observable isError: boolean = false;\n  @observable location: string = '';\n  @observable id: string = '';\n\n  setIsError = (isError: boolean, location: string, id: string): void => {\n    this.isError = isError;\n    this.location = location;\n    this.id = id;\n  };\n}\n\nconst Logger = new FrontendLoggers();\n\nexport default Logger;\n"],"sourceRoot":""}